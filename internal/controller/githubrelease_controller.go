/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controller

import (
	"context"
	"fmt"
	"time"

	batchv1 "k8s.io/api/batch/v1"
	v1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
	"sigs.k8s.io/controller-runtime/pkg/log"

	cvereleasev1 "github.com/cyse7125-su24-team10/cve-operator/api/v1"
)

// GitHubReleaseReconciler reconciles a GitHubRelease object
type GitHubReleaseReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

// +kubebuilder:rbac:groups=cve-release.skynetx.me,resources=githubreleases,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=cve-release.skynetx.me,resources=githubreleases/status,verbs=get;update;patch
// +kubebuilder:rbac:groups=cve-release.skynetx.me,resources=githubreleases/finalizers,verbs=update
// +kubebuilder:rbac:groups=batch,resources=jobs,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=batch,resources=jobs/status,verbs=get
//+kubebuilder:rbac:groups="",resources=namespaces,verbs=get;list;watch;create;update;patch;delete

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// TODO(user): Modify the Reconcile function to compare the state specified by
// the GitHubRelease object against the actual cluster state, and then
// perform operations to make the cluster state reflect the state specified by
// the user.
//
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.18.4/pkg/reconcile
func (r *GitHubReleaseReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	logger := log.FromContext(ctx)

	// Fetch the GitHubRelease instance
	GR := &cvereleasev1.GitHubRelease{}
	if err := r.Get(ctx, req.NamespacedName, GR); err != nil {
		logger.Error(err, "unable to fetch GitHubRelease")
		return ctrl.Result{}, err
	}
	imagePullSecretName := GR.Spec.DockerSecret
	logger.Info(fmt.Sprintf("ImagePullSecretName: %s", imagePullSecretName))
	kafkaUser := GR.Spec.KafkaUser
	kafkaPassword := GR.Spec.KafkaPassword
	boker0 := GR.Spec.KafkaBroker0
	boker1 := GR.Spec.KafkaBroker1
	boker2 := GR.Spec.KafkaBroker2
	image := GR.Spec.Image

	logger.Info(fmt.Sprintf("Url form guthubreleasemonitor: %s", GR.Spec.URL))

	// if GR.Status.Completed {
	// 	return ctrl.Result{}, nil
	// }

	// create a job to process cve's
	job := &batchv1.Job{
		ObjectMeta: metav1.ObjectMeta{
			Name:      "cve-job-processor" + GR.Name,
			Namespace: "cve-operator",
			Annotations: map[string]string{
				"sidecar.istio.io/logLevel":          "debug",
				"sidecar.istio.io/componentLogLevel": "ext_authz:debug,filter:debug",
				"proxy.istio.io/config":              `{"holdApplicationUntilProxyStarts": true}`,
			},
		},
		Spec: batchv1.JobSpec{
			Template: v1.PodTemplateSpec{
				Spec: v1.PodSpec{

					Containers: []v1.Container{
						{
							Name:  "cve-job",
							Image: image,
							SecurityContext: &v1.SecurityContext{
								Capabilities: &v1.Capabilities{
									Add: []v1.Capability{
										"NET_ADMIN",
										"NET_RAW",
									},
								},
							},
							Env: []v1.EnvVar{
								{
									Name:  "KAFKA_USER",
									Value: kafkaUser,
								},
								{
									Name:  "KAFKA_PASSWORD",
									Value: kafkaPassword,
								},
								{
									Name:  "KAFKA_BROKER_0",
									Value: boker0,
								},
								{
									Name:  "KAFKA_BROKER_1",
									Value: boker1,
								},
								{
									Name:  "KAFKA_BROKER_2",
									Value: boker2,
								},
								{
									Name:  "URL",
									Value: GR.Spec.URL,
								},
							},
						},
					},
					RestartPolicy: v1.RestartPolicyNever,
					ImagePullSecrets: []v1.LocalObjectReference{
						{Name: imagePullSecretName},
					},
				},
			},
		},
	}

	//Finalizer logic
	myFinalizerName := "batch.tutorial.kubebuilder.io/finalizer"
	if GR.ObjectMeta.DeletionTimestamp.IsZero() {
		if !controllerutil.ContainsFinalizer(GR, myFinalizerName) {
			controllerutil.AddFinalizer(GR, myFinalizerName)
			if err := r.Update(ctx, GR); err != nil {
				return ctrl.Result{}, err
			}
		}
	} else {
		if controllerutil.ContainsFinalizer(GR, myFinalizerName) {
			// our finalizer is present, so lets handle any external dependency
			if err := r.deleteExternalResources(ctx, job); err != nil {
				// if fail to delete the external resource, return with error
				return ctrl.Result{}, err
			}

			// remove our finalizer from the list and update it.
			controllerutil.RemoveFinalizer(GR, myFinalizerName)
			if err := r.Update(ctx, GR); err != nil {
				return ctrl.Result{}, err
			}
		}
	}

	existingJob := &batchv1.Job{}
	if err := r.Get(ctx, client.ObjectKey{Namespace: job.Namespace, Name: job.Name}, existingJob); err != nil {
		if errors.IsNotFound(err) {
			time.Sleep(30 * time.Second)
			if err := r.Create(ctx, job); err != nil {
				logger.Error(err, "unable to create job cve-job-processor GR release")
				return ctrl.Result{}, err
			}
		} else {
			logger.Error(err, "unable to get job cve-job-processor GR release or jon already exists")
			return ctrl.Result{}, err
		}
	} else {
		logger.Info("Finalizer will delete the job here if githubrelease cr doesnt exist")
	}

	// TODO(user): your logic here

	return ctrl.Result{}, nil
}

func (r *GitHubReleaseReconciler) deleteExternalResources(ctx context.Context, job *batchv1.Job) error {
	// delete any external resources associated with the job
	var joblist batchv1.JobList
	if err := r.List(ctx, &joblist, client.InNamespace(job.Namespace), client.MatchingLabels{"job-name": job.Name}); err != nil {
		return err
	}
	for _, job := range joblist.Items {
		if err := r.Delete(ctx, &job); err != nil {
			return err
		}
	}

	return nil
}

// SetupWithManager sets up the controller with the Manager.
func (r *GitHubReleaseReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&cvereleasev1.GitHubRelease{}).
		Complete(r)
}
